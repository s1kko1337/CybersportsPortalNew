@using System.Timers
@using CyberSportsPortal.Core.OlympiadServices
@using CyberSportsPortal.Core.Services
@using CyberSportsPortal.Data.Model.Views
@using CyberSportsPortal.Data.Entities

@inject AdvertisementService AdvertisementService
@inject AdvertisementTasksService AdvertisementTasksService
@inject IJSRuntime JSRuntime
;
<div class="footer-card">
    @if (adsProbabilities != null && adsProbabilities.Count > 0)
    {
        <video id="advertisement" autoplay muted loop>
            <source id="videosource" type="video/mp4">
        </video>
    }
</div>

@code {
    private const int timerDuration = 10000;
    private List<AdvertisingCompany> advertisingCompanies;
    private List<KeyValuePair<int, int>> adsProbabilities;
    private static Timer timer;
    private static Random randomizer;

    protected override async Task OnInitializedAsync()
    {
        randomizer = new Random();
        advertisingCompanies = await AdvertisementService.GetAdvertisingCompaniesAsync();
        adsProbabilities = AdvertisementTasksService.GetProbabilities(advertisingCompanies);
        StartTimer();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && adsProbabilities != null && adsProbabilities.Count > 0)
        {
            ShowNextAd();
        }
    }

    private void StartTimer()
    {
        timer = new Timer(timerDuration);
        timer.Elapsed += TimerElapsed;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void TimerElapsed(Object source, ElapsedEventArgs e)
    {
        ShowNextAd();
    }

    private void ShowNextAd()
    {
        var maxProbability = adsProbabilities.Sum(x => x.Value);
        var random = randomizer.Next(maxProbability);
        var sum = 0;
        for (int i = 0; i < adsProbabilities.Count; i++)
        {
            sum += adsProbabilities[i].Value;
            if (random < sum && advertisingCompanies.Any())
            {
                var source = advertisingCompanies.First(x => x.Id == adsProbabilities[i].Key).AdvertisementLink;
                JSRuntime.InvokeVoidAsync("loadVideo", source);
                break;
            }
        }
    }
}